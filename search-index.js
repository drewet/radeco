var searchIndex = {};
searchIndex['radeco'] = {"items":[[0,"","radeco","",null,null],[0,"frontend","","",null,null],[0,"esil","radeco::frontend","ESIL (Evaluable Strings Intermediate Language) is the IL used by radare2.\nFor a complete documentation of ESIL please checkout:\n  * https://github.com/radare/radare2/wiki/ESIL\nThis module is used to parse ESIL strings and convert them into the IR.",null,null],[5,"parse","radeco::frontend::esil","",null,{"inputs":[{"name":"string"}],"output":null}],[0,"backend","radeco","",null,null],[3,"D","radeco::backend","",null,null],[0,"lang_c","","",null,null],[5,"serialize","radeco::backend::lang_c","Serializes SCFNodes for debugging purposes.\nTODO: Newlines and indentation, also cover all constructs",null,{"inputs":[{"name":"scfnode"}],"output":{"name":"string"}}],[0,"scf","radeco::backend","",null,null],[3,"MutRefDomain","radeco::backend::scf","Tells SCFNode to refer to children via &SCFNode",null,null],[3,"BoxDomain","","Tells SCFNode to refer to children via Box<SCFNode> (for testing only)",null,null],[4,"ForInitClause","","This enum distinguishes between\nfor(x=1;;) and\nfor(int x=1;;)",null,null],[13,"InitDeclaration","","",0,null],[13,"InitExpression","","",0,null],[4,"SCFNode","","Enum to represent *syntactic* flow structures in C.",null,null],[13,"Empty","","",1,null],[13,"Statement","","",1,null],[13,"Seq","","",1,null],[12,"body","radeco::backend::scf::SCFNode","",1,null],[12,"noreturn","","",1,null],[13,"Cond","radeco::backend::scf","",1,null],[12,"cond","radeco::backend::scf::SCFNode","",1,null],[12,"body","","",1,null],[12,"alt","","",1,null],[13,"Switch","radeco::backend::scf","",1,null],[12,"selector","radeco::backend::scf::SCFNode","",1,null],[12,"cases","","",1,null],[12,"default","","",1,null],[13,"While","radeco::backend::scf","",1,null],[12,"cond","radeco::backend::scf::SCFNode","",1,null],[12,"body","","",1,null],[13,"DoWhile","radeco::backend::scf","",1,null],[12,"cond","radeco::backend::scf::SCFNode","",1,null],[12,"body","","",1,null],[13,"For","radeco::backend::scf","",1,null],[12,"init","radeco::backend::scf::SCFNode","",1,null],[12,"cond","","",1,null],[12,"step","","",1,null],[12,"body","","",1,null],[8,"SCFDomain","radeco::backend::scf","A trait to pass to SCFNode to control the types for declarations,\nexpressions, statements, and most importantly to child SCFNodes.\nThe choice of the name 'Domain' was arbitrary.",null,null],[16,"Declaration","radeco::backend::scf::SCFDomain","",null,null],[16,"Expression","","",null,null],[16,"Statement","","",null,null],[16,"Node","","",null,null],[6,"Declaration","radeco::backend::scf","",null,null],[6,"Expression","","",null,null],[6,"Statement","","",null,null],[6,"Node","","",null,null],[6,"Declaration","","",null,null],[6,"Expression","","",null,null],[6,"Statement","","",null,null],[6,"Node","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"forinitclause"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"scfnode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","radeco::backend","",2,{"inputs":[{"name":"d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Declaration","","",null,null],[6,"Expression","","",null,null],[6,"Statement","","",null,null],[6,"Node","","",null,null]],"paths":[[4,"ForInitClause"],[4,"SCFNode"],[3,"D"]]};
initSearch(searchIndex);
